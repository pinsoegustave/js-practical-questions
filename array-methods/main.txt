Array Methods Revision:
Arrays are special types of objects used to store multiple values in a single variable.

Array Creation: By using [] and Array() constructor

Array accessing: by using square brackets [] notation and pass the index. indices start from 0

Array updating: access element with it's index and assign it to the value you need

Array Methods one by one:

- length property: length property of an array returns the number of elements in the array. It is a property that automatically updates whenever elements are added or removed from the array.
- pop() method: removes the last element from an array and returns that element.
        It mutates the original array by removing the last elements
        If the array is empty(length is 0), pop() returns undefined
- push() method: adds one or more elements to the end of an array and returns the new length of the array.
        It mutates the original array by adding new elements to the end.
        The elements are appended in the order they appear in the arguments list.
- shift() method: removes the first element from an array and returns that element.
        It mutates the original array
- unshift() method: adds one or more elements to the beginning of an array and returns the new length of the array
- splice() method: changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
        It modifies the original array and returns an array containing the removed elements, if any.
        Syntax: splice(startIndex, deleteCount, item1, item2, ...);
- indexOf() method: searches the array for the specified element from the beginning to the end. It returns the index of the first occurence of the specified element in the array.
        If the element is not found it returns -1
        Syntax: .indexOf()
- lastIndexOf() method: searches the array for the specified element from the end to the beginning.
- includes() method: checks whether a specified element is present in the array.
        It returns true if the specified element is found in the array, and false otherwise.
        Syntax: includes(searchElement, fromIndex)
- concat() method: is used to merge two or more arrays, creating a new array that contains the elements of the original arrays.
        It doesnot modify the existing arrays but instead returns a new array with the combined elements.
- reverse() method: is used to reverse the order of the elements in an array.
        It modifies the original array in place and returns the reversed array, with the elements in the opposite order.
- slice() method: is used to extract a portion of an array into a new array, without modifying the original array.
        It takes two optional parameters: start and end which specify the beginning and end of the slice, respectively.
        It returns a new array which containing the extracted elements.
        The original array remains unchangend.
- sort() method: sorts the elements of an array in place and returns the sorted array.
        It modifies the original array and doesnot create a new array.
- flat() method: creates a new array with all sub-array elements concatenated into it.
- toString(): converts an array to a string representation.
- join() method: joins all elements of an array into a single string.
        It returns a string representing the joined array elements
- spread operator: It is a feature introduced in ES6 that allows an iterable like an array, to be expanded into individual elements. The spread operator can be used for various operations, including 
        - Creating shallow copies of arrays, 
        - concatenating arrays, and 
        - passing array elements as arguments to functions.
        - can be used to add new elements to an array, either at the beginning or at the end.
        - BONUS: Can be used to find the Max or Min number in an array.
 - destructuring: It is a feature introduced in ES6 that allows you to extract values from an array and assign them to variables in a concise and readable way.
        - It provides a convenient syntax for unpacking array elements into separate variables.
        - It uses [] to indicate that the values come from the array.
        - You can skip elements in an array by omitting the corresponding variable name in the destructuring assignment.
        - The rest syntax(...) can be used to hold the remaining elements of an array into a single variable.
        - You can provide default valus for variables in case the corresponding array element is undefined.
Array Iteration
- for loop: 
- for of:
- forEach() method: is a built-in array method that executes a provided function once for each array element.
- filter() method: creates a new array with all elements that pass the test implementated by the provided function.
        It returns a new array containing only the elements of the original array that satisfy the condition specified in the callback function.
        It returns a neww array with the same length as the original array, where each element is the result of applying the provided function to the corresponding element of the original array.
- map() method: creates a new array by applying a function to each element of the original array.
        It doesnot change the original array.
        It returns a new array with the same length as the original array, where each element is the result of applying the provided function to the corresponding element of the original array.
- reduce() method: applies a function against an accumulator and each element in the array to reduce it to a single value.
        It returns a single value that is the result of applying the provided function to each element in the array.
        It doesn't change the original array.  
- some() method: tests whether at least one element in the array passes the test implemented by the provided function.
        It returns true if atleast one element in the array satisfies the testing function.
        It doesn't change the original array.
- every() method: tests whether all elements in the array pass the test implemented by the provided function.
        It returns true if all elements satisfy the testing function, otherwise false.
        It doesn't change the original function.
- find() method: returns the value of the first element in the array that satisfies the provided testing function.
        It searches the array from left to right, and once an element passes the test, it stops searching and returns that element's value.
        It doesnot change the original array.
        It returns the value of the first element of the array that satisfies the testing function. If no, returns undefined.

