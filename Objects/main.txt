## JavaScript objects
The Object type represents one of JavaScript's Data types. It is a data structure used to store related data collections. It stores data as key-value pairs.

Objects can be created using Object() constructor or the object initializer/ literal syntax.

Deleting a property from an object
There isn't any method in an Object itself to delete its own properties (such as Map.prototype.delete()). To do so, one must use the delete operator.

Creating a normal object
const obj = { }; 

### constructor
Object(): Turns the input into an object.

### Static Methods:
Object.assign(): copies the values of all enumerable own properties from one or more source objects to a target object.
Object.create(): creates a new object with the specified prototype object and properties.
Object.defineOwnProperties(): Adds the named properties described by the given descriptor to an object.
Object.defineProperty(): adds the named property described by the given descriptor to an object.
Object.entries(): Returns an array containing all the [key, value] pairs of a given object's own enumerable string properties.
Object.freeze(): freezes an object. Other codes cannot delete or change its properties.
Object.fromEntries(): returns a new object from an iterable of [key, value] pairs. (This is the reverse of Object.entries()).
Object.hasOwnPropertyDescriptor(): returns a property descriptor for a named property on an object.
Object.hasOwnPropertyDescriptors(): returns an object containing all own property descriptors for an object.
Object.getOwnPropertySymbols(): returns an array of all symbol properties found directly upon a given object.
Object.getPrototypeOf(): returns the prototype (internal [[prototype]] property) of the specified object.
Object.groupBy(): Groups the elements of a given iterable according to the string values returned by a provided callback function. The returned object has separate properties for each group, containing arrays with the elements in the groups.
Object.hasOwn(): returns true if the specified object has the indicated property as its own property, or false if the property is inherited or doesnot exist.
Object.is(): Compares if two values are the same value. Equates all NaN values(which differs from both isLooselyEqual  used by == and IsStrictEqual used by ===)
Object.isExtensible(): Determines if expending of an object is allowed.
Object.isFrozen(): Determines if an object was frozen.
Object.isSealed(): Determines if an object is sealed.
Object.keys(): Returns an array containing the names of all of the given object's own enumrable string properties.
Object.preventExtensions(): prevents any extensions of an object.
Object.seal(): Prevents other code from deleting properties of an object.
Object.setPrototypeOf(): sets the object's prototype(its internal [[Prototype]] property).
Object.values(): returns an array containing the values that correspond to all of a given object's own enumerable string properties.

JavaScript Method Chaining: It allows us to run multiple methods on the same element within a single statement.